%YAML:1.0
#common parameters
imu: 1
num_of_cam: 1
imu_topic: "/d400/imu0"
image0_topic: "/d400/color/image_raw"
# depth_topic: "/d400/aligned_depth_to_color/image_raw"
output_path: "/home/shinan/catkin_ws/vins_output"
cam0_calib: "d400_cam0.yaml"
image_width: 848
image_height: 480
#RGBD camera Ideal Range
# depth_min_dist: 0.3
# depth_max_dist: 3

# frontend_freq: 30 # It should be raised in VO mode(without IMU).
keyframe_parallax: 10.0 # keyframe selection threshold (pixel); if system fails frequently, please try to reduce the "keyframe_parallax"  
# num_grid_rows: 7
# num_grid_cols: 8

#unsynchronization parameters
estimate_td: 0    ##########                  # online estimate time offset between camera and imu
td: 0.000                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)


# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data:  [0.999975572679493,  0.003849141066713,  0.005854714944742, 0.0203127935529,
         -0.003828680351062,  0.999986658473099,  -0.003501944262433, -0.00510325236246,
         -0.005868115609379,  0.003479442469180,  0.999976848846595, -0.0112013882026,
         0, 0, 0, 1.]

multiple_thread: 2
#feature traker paprameters
max_cnt: 150           # max feature number in feature tracking. It is suggested to be raised in VO mode.
min_dist: 30            # min distance between two features
freq: 80             # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1          # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. 
gyr_n: 0.01         # gyroscope measurement noise standard deviation.   
acc_w: 0.0002         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5

g_norm: 9.805       # gravity magnitude

#rolling shutter parameters
# rolling_shutter: 1                      # 0: global shutter camera, 1: rolling shutter camera
# rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet)

#loop closure parameters
loop_closure: 1                # start loop closure
fast_relocalization: 0             # useful in real-time and large project
load_previous_pose_graph: 0       # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/shinan/catkin_ws/vins_output/pose_graph/" # save and load path

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0
# visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
# visualize_camera_size: 0.4      # size of camera marker in RVIZ